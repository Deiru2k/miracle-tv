enum AccessUnit {
  DENY
  READ
  WRITE
  SELF
  INHERIT
}

type UserActions {
  silence: Boolean
  ban: Boolean
  warn: Boolean
}

type Actions {
  user: UserActions
}

type AccessRights {
  channels: [AccessUnit]
  streamKeys: [AccessUnit]
  roles: [AccessUnit]
  users: [AccessUnit]
  activities: [AccessUnit]
  userSettings: [AccessUnit]
}

type AccessTargets {
  rights: AccessRights!
  actions: Actions!
}

type Role {
  id: ID!
  name: String!
  access: AccessTargets!
  parentId: ID
}

extend type Query {
  role(id: ID!): Role
  roles(filter: UpdateRoleInput): [Role]!
}

extend type Mutation {
  createRole(input: CreateRoleInput): Role!
    @auth(rights: [{ unit: WRITE, subject: "roles" }])
  updateRole(input: UpdateRoleInput): Role!
    @auth(rights: [{ unit: WRITE, subject: "roles" }])
  deleteRole(id: ID!): Boolean!
    @auth(rights: [{ unit: WRITE, subject: "roles" }])
}

########################
# INPUT ZONE BRRRRRRRR #
########################

input UserActionsInput {
  silence: Boolean
  ban: Boolean
  warn: Boolean
}

input ActionsInput {
  user: UserActionsInput
}

input AccessTargetsInput {
  channels: AccessUnit
  users: AccessUnit
  activities: AccessUnit
  actions: ActionsInput!
}

input CreateRoleInput {
  id: ID!
  name: String!
  access: AccessTargetsInput!
  parentId: ID!
}

input UpdateRoleInput {
  id: ID
  name: String
  access: AccessTargetsInput
  parentId: ID
}
