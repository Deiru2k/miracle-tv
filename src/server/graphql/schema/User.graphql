type User {
  id: ID
  username: String!
  displayName: String
  bio: String
  singleUserMode: Boolean!
  emailHash: String
  roles: [Role]!
  channels: [Channel]!
  avatar: File
  header: File
  streamThumbnail: File
}

type Session {
  id: ID!
  user: ID!
  expiresAt: DateTime!
}

type SessionResponse {
  token: ID!
  expiresAt: DateTime!
}

type UserSettings {
  id: ID
  useGravatar: Boolean
}

extend type Query {
  users: [User]!
  self: User!
  user(id: ID!): User
}

input CreateUserInput {
  username: String!
  password: String!
  email: String!
}

input SignInInput {
  username: String!
  password: String!
}

input UpdateSelfInput {
  displayName: String
  bio: String
  singleUserMode: Boolean
  avatar: ID
  header: ID
  streamThumbnail: ID
}

input UpdateUserInput {
  id: ID
  displayName: String
  bio: String
  singleUserMode: Boolean
  avatar: ID
  header: ID
  streamThumbnail: ID
}

extend type Mutation {
  signUp(input: CreateUserInput!): User!
  signIn(input: SignInInput!): SessionResponse
  updateUser(input: UpdateUserInput!): User!
  updateSelf(input: UpdateSelfInput!): User!
}
