type User {
  id: ID
  username: String!
  displayName: String
  bio: String
  emailHash: String
  roles: [Role]!
  channels: [Channel]!
  avatar: File
  header: File
  streamThumbnail: File
  settings: UserSettings
}

type UserAccountDetails {
  id: ID
  username: String!
  email: String!
}

type Session {
  id: ID!
  user: ID!
  expiresAt: DateTime!
  lastUsedAt: DateTime!
  userAgent: String!
  ip: String!
  isCurrentSession: Boolean!
}

type SessionResponse {
  token: ID!
  expiresAt: DateTime!
}

type UserSettings {
  id: ID
  useGravatar: Boolean
  singleUserMode: Boolean
  singleUserChannel: Channel
  featureInDirectory: Boolean
}

input UsersFilter {
  ids: [ID]
  username: String
  displayName: String
  email: String
}

extend type Query {
  users(filter: UsersFilter, limit: QueryLimit): [User]!
  userDirectory(limit: QueryLimit): [User]!
  self: User! @auth(rights: [{ unit: SELF, subject: "users" }])
  selfAccount: UserAccountDetails!
    @auth(rights: [{ unit: SELF, subject: "users" }])
  selfSessions: [Session] @auth(rights: [{ unit: SELF, subject: "users" }])
  user(id: ID!): User
  userSettings: UserSettings!
    @auth(rights: [{ unit: SELF, subject: "userSettings" }])
}

input CreateUserInput {
  username: String!
  password: String!
  email: String!
}

input SignInInput {
  username: String!
  password: String!
}

input UpdateSelfInput {
  displayName: String
  bio: String
  singleUserMode: Boolean
  avatar: ID
  header: ID
  streamThumbnail: ID
}

input UpdateUserInput {
  id: ID
  displayName: String
  bio: String
  singleUserMode: Boolean
  avatar: ID
  header: ID
  streamThumbnail: ID
}

input UpdateUserSettingsInput {
  singleUserMode: Boolean
  useGravatar: Boolean
  singleUserChannel: ID
  featureInDirectory: Boolean
}

input UpdateUserAccountInput {
  email: String!
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

extend type Mutation {
  signUp(input: CreateUserInput!): User!
  signIn(input: SignInInput!): SessionResponse
  updateUser(input: UpdateUserInput!): User
    @auth(rights: [{ unit: WRITE, subject: "users" }])
  updateSelf(input: UpdateSelfInput!): User
    @auth(rights: [{ unit: SELF, subject: "users" }])
  revokeSelfSessions(input: [String]!): Boolean
    @auth(rights: [{ unit: SELF, subject: "users" }])
  updateSelfAccount(input: UpdateUserAccountInput): UserAccountDetails
    @auth(rights: [{ unit: SELF, subject: "users" }])
  changeSelfPassword(input: ChangePasswordInput): Boolean
    @auth(rights: [{ unit: SELF, subject: "users" }])
  updateUserSettings(input: UpdateUserSettingsInput!): UserSettings
    @auth(rights: [{ unit: SELF, subject: "userSettings" }])
}
