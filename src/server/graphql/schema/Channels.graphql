type ChannelMeta {
  subscriberCount: Int!
}

type Channel {
  id: ID!
  user: User
  activity: Activity
  slug: String
  name: String!
  description: String
  thumbnail: File
  status: ChannelStatus
  meta: ChannelMeta
  disabled: Boolean!
  shelved: Boolean!
}

input ChannelsQueryFilter {
  id: ID
  ids: [ID]
  userId: ID
  userIds: [ID]
  activityId: ID
  activityIds: [ID]
  slug: String
  name: String
  description: String
}

extend type Query {
  channel(id: ID!): Channel
  channels(filter: ChannelsQueryFilter, limit: QueryLimit): [Channel]!
  channelsCount(filter: ChannelsQueryFilter): Int!
  fullChannels(filter: ChannelsQueryFilter, limit: QueryLimit): [Channel]!
  fullChannelsCount(filter: ChannelsQueryFilter): Int!
  selfChannels(filter: ChannelsQueryFilter): [Channel]!
  channelSubscriptions(
    filter: ChannelsQueryFilter
    limit: QueryLimit
  ): [Channel]!
}

input CreateChannelInput {
  userId: ID
  activityId: ID
  name: String!
  slug: String
  description: String
  thumbnail: ID
}

input UpdateChannelInput {
  id: ID!
  activityId: ID
  name: String
  slug: String
  description: String
  thumbnail: ID
}

extend type Mutation {
  createChannel(input: CreateChannelInput): Channel!
    @auth(
      rights: [
        { unit: WRITE, subject: "channels" }
        { unit: SELF, subject: "channels" }
      ]
    )
  updateChannel(input: UpdateChannelInput): Channel!
    @auth(
      rights: [
        { unit: WRITE, subject: "channels" }
        { unit: SELF, subject: "channels" }
      ]
    )
  disableChannel(id: ID!): Boolean!
    @auth(rights: [{ unit: WRITE, subject: "channels" }])
  enableChannel(id: ID!): Boolean!
    @auth(rights: [{ unit: WRITE, subject: "channels" }])
  deleteChannel(id: ID!): Boolean!
    @auth(
      rights: [
        { unit: WRITE, subject: "channels" }
        { unit: SELF, subject: "channels" }
      ]
    )
}
