type StreamKey {
  id: ID!
  user: User!
  channel: Channel!
  name: String
}

input StreamKeyFilter {
  userId: ID
  channelId: ID
}

extend type Query {
  streamKeys(filter: StreamKeyFilter, limit: QueryLimit): [StreamKey]!
    @auth(rights: [{ unit: WRITE, subject: "streamKeys" }])
  streamKeysCount(filter: StreamKeyFilter): Int!
    @auth(rights: [{ unit: WRITE, subject: "streamKeys" }])
  selfStreamKeys: [StreamKey]!
    @auth(rights: [{ unit: SELF, subject: "streamKeys" }])
  streamKeysByChannelId(channelId: ID!): [StreamKey]!
    @auth(
      rights: [
        { unit: SELF, subject: "streamKeys" }
        { unit: READ, subject: "streamKeys" }
      ]
    )
}

input CreateStreamKeyInput {
  userId: ID!
  channelId: ID!
  name: String
}

input RevokeStreamKeysInput {
  userId: ID!
  channelId: ID!
  name: String
}

input RevokeAllStreamKeysInput {
  userId: ID!
}

extend type Mutation {
  createStreamKey(input: CreateStreamKeyInput!): StreamKey!
    @auth(
      rights: [
        { unit: SELF, subject: "streamKeys" }
        { unit: WRITE, subject: "streamKeys" }
      ]
    )
  revokeStreamKeys(input: RevokeStreamKeysInput!): Boolean!
    @auth(
      rights: [
        { unit: SELF, subject: "streamKeys" }
        { unit: WRITE, subject: "streamKeys" }
      ]
    )
  revokeAllStreamKeys(input: RevokeAllStreamKeysInput!): Boolean!
    @auth(
      rights: [
        { unit: SELF, subject: "streamKeys" }
        { unit: WRITE, subject: "streamKeys" }
      ]
    )
  revokeStreamKey(key: ID!): Boolean!
    @auth(
      rights: [
        { unit: SELF, subject: "streamKeys" }
        { unit: WRITE, subject: "streamKeys" }
      ]
    )
  bulkRevokeStreamKeys(keys: [ID]!): Boolean!
    @auth(rights: [{ unit: WRITE, subject: "streamKeys" }])
}
